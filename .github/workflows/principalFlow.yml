# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: CHECKOUT CURRENT REPOSITORY IN VIRTUAL MACHINE
        uses: actions/checkout@v3
          
      - name: NODE INSTALL
        run: npm install node

      - name: Set up GitHub CLI
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh 
          
      - name: INSTALL SFDX 
        run: npm install @salesforce/cli --global 
      
      - name: AUTH DEV HUB
        run: | 
            echo "${{ secrets.DEVHUB_KEY }}" > devhubkey.key
            sf org login jwt --client-id ${{secrets.DEVHUB_CLIENTID}} --jwt-key-file devhubkey.key --username ${{secrets.DEVHUB_USERNAME}} --alias devHub --set-default-dev-hub  

      - name : authorise scratch
        id: authorise-scratch
        run: |
            export DECODED_SECRET=$(echo "${{ secrets.SCRATC_ORG_AUTH }}" | base64 --decode)
            echo "decoded secret is: $DECODED_SECRET" 
            USERNAME=$(echo "$DECODED_SECRET" | jq -r '.result.authFields.username') 
            INSTANCE_URL=$(echo "$DECODED_SECRET" | jq -r '.result.authFields.instanceUrl') 
            echo "${{ secrets.DEVHUB_KEY }}" > devhubkey.key 
            sf_org_login_output=$(sf org login jwt --client-id ${{secrets.DEVHUB_CLIENTID}} --jwt-key-file devhubkey.key --username $USERNAME --instanceurl $INSTANCE_URL --set-default --json 2>&1)
            if [ $? -ne 0 ]; then   
                sf org create scratch --definition-file config/project-scratch-def.json --alias TestDeployScratch --duration-days 10 --set-default --json
                sf_org_create_scratch_output=$(sf org create scratch --definition-file config/project-scratch-def.json --alias TestDeployScratch --duration-days 10 --set-default --json 2>&1)
                echo $sf_org_create_scratch_output | jq -r '.result' > result.json 
                gh secret set SCRATCH_ORG_AUTH --body=$(cat "result.json") 
                exit 1
            fi 
        shell: bash
        env:
            GH_TOKEN: ${{ secrets.ADMIN_TOKEN }} 

      - name: try DEPLOY and execute tests
        run: sf project deploy start --dry-run  --test-level RunAllTestsInOrg
        if: always()



