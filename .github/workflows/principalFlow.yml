name: CI

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: CHECKOUT CURRENT REPOSITORY IN VIRTUAL MACHINE
        uses: actions/checkout@v3
          
      - name: NODE INSTALL
        run: npm install node

      - name: Set up GitHub CLI
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh 

      - name: install jq
        run: |
            sudo apt-get install jq
          
      - name: INSTALL SFDX 
        run: npm install @salesforce/cli --global 
      
      - name: AUTH DEV HUB
        run: |
            echo "${{ secrets.DEVHUB_KEY }}" > devhubkey.key
            CLIENT_ID=${{ secrets.DEVHUB_CLIENTID}}
            sf org login jwt --client-id $CLIENT_ID --jwt-key-file devhubkey.key --username nicholas@arpedio.com --alias devHub --set-default-dev-hub  

      - name: Authorize Scratch Org, Create Scratch, Save JSON Result, Add or update secret
        id: scratch-and-secret
        run: |
            export DECODED_SECRET=$(echo "${{ secrets.SCRATC_ORG_AUTH }}" | base64 --decode)
            echo "decoded secret is: $DECODED_SECRET"
            CONSUMER_KEY=$(echo "$DECODED_SECRET" | jq -r '.result.scratchOrgInfo.ConnectedAppConsumerKey')
            echo "Consumer key is: $CONSUMER_KEY"
            USERNAME=$(echo "$DECODED_SECRET" | jq -r '.result.authFields.username')
            echo "Username is: $USERNAME"
            INSTANCE_URL=$(echo "$DECODED_SECRET" | jq -r '.result.authFields.instanceUrl')
            echo "Instance Url is: $INSTANCE_URL"
            echo "${{ secrets.DEVHUB_KEY }}" > devhubkey.key 
            echo "Attempting to log into the scratch" 
            LOGIN_RESULT=$(sf org login jwt --client-id $CONSUMER_KEY --jwt-key-file devhubkey.key --username $USERNAME --alias TestDeployScratch --instanceurl $INSTANCE_URL --set-default --json)

            # Check if login was successful
            LOGIN_CODE=$(echo "$LOGIN_RESULT" | jq -r '.code')
            if [ $LOGIN_CODE -eq 0 ]; then
                echo "Login successful"
            else
                echo "Login failed"
                # Create Scratch Org
                echo "org does not exist, creating new"
                output=$(sf org create scratch --definition-file config/project-scratch-def.json --alias TestDeployScratch --duration-days 10 --set-default --json | base64 -w 0)
                echo "::set-output name=result::${output}"
      
                # Save JSON Result
                echo "${output}" > result.json
      
                # Add or update secret
                gh secret set SCRATC_ORG_AUTH --body=$(cat "result.json")
                exit 1
            fi 
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}


      - name: try DEPLOY and execute tests
        run: sf project deploy start --dry-run --target-org TestDeployScratch --test-level RunAllTestsInOrg
